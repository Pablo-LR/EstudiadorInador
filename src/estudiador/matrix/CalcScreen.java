/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estudiador.matrix;

import estudiador.screens.*;
import java.awt.Label;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
/**
 *
 * @author alber
 */
public class CalcScreen extends javax.swing.JPanel{

    private static int col, row;  
    private static double manipulatedMatrix[][];
    private static double tempMatrix[][];
    private static JTextField inputField[][];
    private static int result;
    private static int lastCol, lastRow;
    StartScreen parentFrame;
    /**
     * Creates new form MatrixScreen
     * @param parentFrame
     */
    public CalcScreen(StartScreen parentFrame) {
        this.parentFrame = parentFrame;
        initComponents();
        col = row = 0;
        manipulatedMatrix = new double[0][0];
    }
    /**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnMainMenu = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnShowMatrix = new javax.swing.JButton();
        btnSubstract = new javax.swing.JButton();
        btnMultiply = new javax.swing.JButton();
        btnTranspose = new javax.swing.JButton();
        btnDivideByScalar = new javax.swing.JButton();
        btnDeterminant = new javax.swing.JButton();
        btnMultiplyByScalar = new javax.swing.JButton();
        btnInverse = new javax.swing.JButton();
        btnNewMatrix = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        btnBack.setText("Regresar");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnMainMenu.setText("Menu Principal");
        btnMainMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });

        btnAdd.setText("Sumar a Matriz");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnShowMatrix.setText("Mostrar Matriz");
        btnShowMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowMatrixActionPerformed(evt);
            }
        });

        btnSubstract.setText("Restar a Matriz");
        btnSubstract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubstractActionPerformed(evt);
            }
        });

        btnMultiply.setText("Multiplicar por Matriz");
        btnMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultiplyActionPerformed(evt);
            }
        });

        btnTranspose.setText("Transponer");
        btnTranspose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransposeActionPerformed(evt);
            }
        });

        btnDivideByScalar.setText("Dividir entre Escalar");
        btnDivideByScalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDivideByScalarActionPerformed(evt);
            }
        });

        btnDeterminant.setText("Obtener Determinante");
        btnDeterminant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeterminantActionPerformed(evt);
            }
        });

        btnMultiplyByScalar.setText("Multiplicar por Escalar");
        btnMultiplyByScalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultiplyByScalarActionPerformed(evt);
            }
        });

        btnInverse.setText("Obtener Inversa");
        btnInverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInverseActionPerformed(evt);
            }
        });

        btnNewMatrix.setText("Crear Matriz");
        btnNewMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewMatrixActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Operaciones con Matrices");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTranspose, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShowMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMultiplyByScalar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeterminant, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDivideByScalar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnInverse, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSubstract, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 860, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addComponent(btnNewMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubstract, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMultiplyByScalar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShowMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDivideByScalar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInverse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeterminant, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTranspose, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnMainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        parentFrame.insertContent(new PantallaMatrix(parentFrame));
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        parentFrame.insertContent(new PantallaInicio(parentFrame));
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        matrixPlusMatrix();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnShowMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowMatrixActionPerformed
        ShowMatrix(manipulatedMatrix, "Matriz");
    }//GEN-LAST:event_btnShowMatrixActionPerformed

    private void btnSubstractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubstractActionPerformed
        matrixMinusMatrix();
    }//GEN-LAST:event_btnSubstractActionPerformed

    private void btnMultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultiplyActionPerformed
        MultiplyMatrix();
    }//GEN-LAST:event_btnMultiplyActionPerformed

    private void btnTransposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransposeActionPerformed
        frameTransposing(manipulatedMatrix);
    }//GEN-LAST:event_btnTransposeActionPerformed

    private void btnDivideByScalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDivideByScalarActionPerformed
        divideByScaler();
    }//GEN-LAST:event_btnDivideByScalarActionPerformed

    private void btnDeterminantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeterminantActionPerformed
        frameGetDeterminant();
    }//GEN-LAST:event_btnDeterminantActionPerformed

    private void btnMultiplyByScalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultiplyByScalarActionPerformed
        frameMultliplyByScaler();
    }//GEN-LAST:event_btnMultiplyByScalarActionPerformed

    private void btnInverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInverseActionPerformed
        inverse();
    }//GEN-LAST:event_btnInverseActionPerformed

    private void btnNewMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewMatrixActionPerformed
        NewMatrix();
    }//GEN-LAST:event_btnNewMatrixActionPerformed

    //Solicitar las dimensiones de la matriz
    private static void getDimension() {
        JTextField lField = new JTextField(5);  
        JTextField wField = new JTextField(5); 

        //design input line
        JPanel choosePanel[] = new JPanel[2];
        choosePanel[0] = new JPanel();
        choosePanel[1] = new JPanel();
        choosePanel[0].add(new JLabel("Introduce las dimensiones de la matriz"));
        choosePanel[1].add(new JLabel("Renglones"));
        choosePanel[1].add(lField);
        choosePanel[1].add(Box.createHorizontalStrut(15)); 
        choosePanel[1].add(new JLabel("Columnas:"));
        choosePanel[1].add(wField);

        result = JOptionPane.showConfirmDialog(null, choosePanel,
                null, JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE);

        //save last dimensions
        lastCol = col;
        lastRow = row;

        //ok option
        if (result == 0) {

            if (wField.getText().equals("")) {
                col = 0;
            } else {
                if (isInt(wField.getText())) {
                    col = Integer.parseInt(wField.getText());
                } else {
                    JOptionPane.showMessageDialog(null, "Dimensiones Incorrectas");
                    col = lastCol;
                    row = lastRow;
                    return;
                }

                if (isInt(lField.getText())) {
                    row = Integer.parseInt(lField.getText());
                } else {
                    JOptionPane.showMessageDialog(null, "Dimensiones Incorrectas");
                    col = lastCol;
                    row = lastRow;
                    return;
                }

            }
            if (col < 1 || row < 1) {
                JOptionPane.showConfirmDialog(null, "Has introducido mal las dimensiones",
                        "Error", JOptionPane.PLAIN_MESSAGE);
                col = lastCol;
                row = lastRow;

            } else {
                tempMatrix = manipulatedMatrix;
                manipulatedMatrix = new double[row][col];
                if (!setElements(manipulatedMatrix, "Llena la Matriz")) 
                {
                    //backup

                    manipulatedMatrix = tempMatrix;
                }
            }
        } else if (result == 1) {
            col = lastCol;
            row = lastRow;
        }
    }//end get Dimension

    //Llenar la matriz
    private static boolean setElements(double matrix[][], String title) {
        int temp, temp1;             
        String tempString;

        JPanel choosePanel[] = new JPanel[row + 2];
        choosePanel[0] = new JPanel();
        choosePanel[0].add(new Label(title));
        choosePanel[choosePanel.length - 1] = new JPanel();
        choosePanel[choosePanel.length - 1].add(new Label("Considera los espacios vacios como cero"));
        inputField = new JTextField[matrix.length][matrix[0].length];

        //lenght loop
        for (temp = 1; temp <= matrix.length; temp++) {
            choosePanel[temp] = new JPanel();

            for (temp1 = 0; temp1 < matrix[0].length; temp1++) {
                inputField[temp - 1][temp1] = new JTextField(3);
                choosePanel[temp].add(inputField[temp - 1][temp1]);

                if (temp1 < matrix[0].length - 1) {
                    choosePanel[temp].add(Box.createHorizontalStrut(15)); 
                }

            }

        }

        result = JOptionPane.showConfirmDialog(null, choosePanel,
                null, JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == 0) {
            checkTextField(inputField);
            for (temp = 0; temp < matrix.length; temp++) {
                for (temp1 = 0; temp1 < matrix[0].length; temp1++) {
                    tempString = inputField[temp][temp1].getText();

                    if (isDouble(tempString)) {
                        matrix[temp][temp1] = Double.parseDouble(inputField[temp][temp1].getText());
                    } else {
                        JOptionPane.showMessageDialog(null, "Has introducido valores incorrectos");

                        col = lastCol;
                        row = lastRow;

                        return false;
                    }
                }
            }
            return true;
        } else {
            return false;
        }

    }
    
    //Comprobar que los valores introducidos sean válidos
    private static void checkTextField(JTextField field[][]) {
        for (int temp = 0; temp < field.length; temp++) {
            for (int temp1 = 0; temp1 < field[0].length; temp1++) {
                if (field[temp][temp1].getText().equals("")) {
                    field[temp][temp1].setText("0");
                }
            }
        }
    }
    
    //Imprime la matriz
    private static void ShowMatrix(double[][] matrix, String title) {
        int temp, temp1;             

        JPanel choosePanel[] = new JPanel[matrix.length + 1];
        choosePanel[0] = new JPanel();
        choosePanel[0].add(new JLabel(title));

        for (temp = 1; temp <= matrix.length; temp++) {
            choosePanel[temp] = new JPanel();

            for (temp1 = 0; temp1 < matrix[0].length; temp1++) {
                if (matrix[temp - 1][temp1] == -0) {
                    matrix[temp - 1][temp1] = 0;
                }
                choosePanel[temp].add(new JLabel(String.format("%.2f", matrix[temp - 1][temp1])));

                if (temp1 < matrix[0].length - 1) {
                    choosePanel[temp].add(Box.createHorizontalStrut(15));
                }

            }

        }

        if (col == 0 || row == 0) {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
        } else {

            JOptionPane.showMessageDialog(null, choosePanel, null,
                    JOptionPane.PLAIN_MESSAGE, null);
        }
    }
    
    //Suma de Matrices
    private static void matrixPlusMatrix() {
        if (manipulatedMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
        } else {
            double m2[][] = new double[row][col];
            double sum[][] = new double[row][col];

            if (setElements(m2, "Llena la matriz")) {

                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < col; j++) {
                        sum[i][j] = manipulatedMatrix[i][j] + m2[i][j];
                    }
                }
                ShowMatrix(sum, "Resultado de la suma de matrices");
            }
        }
    }

    //Resta de Matrices
    private static void matrixMinusMatrix() {

        if (manipulatedMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
        } else {
            double m2[][] = new double[row][col];
            double sub[][] = new double[row][col];
            double temp[][] = new double[row][col];

            if (setElements(m2, "Llena la matriz a restar")) {

                for (int i = 0; i < row; i++) {
                    for (int j = 0; j < col; j++) {
                        temp[i][j] = (-1 * m2[i][j]);
                        sub[i][j] = manipulatedMatrix[i][j] + temp[i][j];
                    }
                }
                ShowMatrix(sub, "Resultado de la resta de matrices");
            }
        }
    }

    //Producto de dos matrices
    private static void MultiplyMatrix() {

        JTextField wField = new JTextField(5); 
        int col2 = 0;
        double m2[][], results[][];
        int sum;

        if (manipulatedMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
        } else {

            JPanel choosePanel[] = new JPanel[2];
            choosePanel[0] = new JPanel();
            choosePanel[1] = new JPanel();

            choosePanel[0].add(new JLabel("Introduce las dimensiones de la matriz"));

            choosePanel[1].add(new JLabel("Renglones:"));
            choosePanel[1].add(new JLabel("" + col));
            choosePanel[1].add(Box.createHorizontalStrut(15));
            choosePanel[1].add(new JLabel("Columnas:"));
            choosePanel[1].add(wField);

            result = JOptionPane.showConfirmDialog(null, choosePanel,
                    null, JOptionPane.PLAIN_MESSAGE,
                    JOptionPane.PLAIN_MESSAGE);

            if (result == 0) {
                if (wField.getText().equals("")) {
                    col2 = 0;
                } else {
                    if (isInt(wField.getText())) {
                        col2 = Integer.parseInt(wField.getText());

                    }
                }

                m2 = new double[col][col2];
                results = new double[row][col2];
                if (setElements(m2, "Matriz a multiplicar")) {

                    for (int i = 0; i < row; i++) {
                        for (int j = 0; j < col2; j++) {
                            sum = 0;
                            for (int k = 0; k < col; k++) {
                                sum += manipulatedMatrix[i][k] * m2[k][j];
                            }

                            results[i][j] = sum;

                        }
                    }

                    ShowMatrix(results, "Resultado de la multiplicacion");
                }
            }
            else {
            }
        }
    }
    
    //Cuadro de multiplicacion escalar
    private static void frameMultliplyByScaler() {

        double[][] results = new double[row][col];
        double x;
        String tempString;

        if (manipulatedMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
            return;
        }

        tempString = JOptionPane.showInputDialog(null,"Introduce el escalar a multiplicar");

        if (tempString == null)
        {
            return;
        } else if (!tempString.equals("")) {
            x = Double.parseDouble(tempString);
        } else {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
            return;
        }
        results = multliplyByScaler(manipulatedMatrix, x);
        ShowMatrix(results, "Resultado de la multiplicacion");
    }

    //Multiplicacion escalar
    private static double[][] multliplyByScaler(double[][] matrix, double x) {

        double[][] results = new double[row][col];
        int i, j;

        for (i = 0; i < matrix.length; i++) {
            for (j = 0; j < matrix[0].length; j++) {
                results[i][j] = x * matrix[i][j];
            }
        }
        return results;
    }
    
    //Division entre escalar
    private static void divideByScaler() {
        double[][] results = new double[row][col];
        int i, j;
        double x;
        String tempString;

        if (manipulatedMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
            return;
        }

        tempString = JOptionPane.showInputDialog("Introduce el escalar para dividir");

        if (tempString == null)
        {
            return;
        } else if (!tempString.equals("")) {
            x = Double.parseDouble(tempString);
        } else {
            JOptionPane.showMessageDialog(null, "Escalar introducido no valido");
            return;
        }

        if (x == 0) {
            JOptionPane.showMessageDialog(null, "Aun no es posible dividir entre 0");
            return;
        }

        for (i = 0; i < row; i++) {
            for (j = 0; j < col; j++) {
                results[i][j] = manipulatedMatrix[i][j] / x;
            }
        }
        ShowMatrix(results, "Resultado de la division");
    }

    //Cuadro para obtener determinante
    private static void frameGetDeterminant() {
        if (manipulatedMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
        } else if (col != row) {
            JOptionPane.showMessageDialog(null, "La matriz debe ser cuadrada");
        } else {
            double result = getDeterminant(manipulatedMatrix);

            JOptionPane.showMessageDialog(null, String.format("Determinante = %.2f",
                    result), null,
                    JOptionPane.PLAIN_MESSAGE, null);
        }
    }
    
    //Intercambiar valores de listas diferentes
    private static void swap(double[] res1, double[] res2) {
        int temp;
        double tempDouble;
        for (temp = 0; temp < res1.length; temp++) {
            tempDouble = res1[temp];
            res1[temp] = res2[temp];
            res2[temp] = tempDouble;
        }
    }

    //Obtener determinante
    private static double getDeterminant(double[][] matrix) {
        int temp, temp1, temp2;
        double coeficient;
        double result = 1;
        int sign = 1;
        int zeroCounter;

        double res[][] = new double[matrix.length][matrix[0].length];

        for (temp = 0; temp < matrix.length; temp++) {
            for (temp1 = 0; temp1 < matrix[0].length; temp1++) {
                res[temp][temp1] = matrix[temp][temp1];
            }
        }
        for (temp = 0; temp < res.length; temp++) {
            if (res[temp][temp] != 0) {
                continue;
            }
            for (temp1 = 1; temp1 < res.length - 1; temp1++) {
                if (res[(temp1 + temp) % matrix.length][temp] != 0) { 
                    swap(res[temp], res[(temp1 + temp) % res.length]);
                    sign *= -1;
                    break;
                }
            }
        }

        for (temp = 1; temp < res.length; temp++) {
            for (temp1 = 0; temp1 < temp; temp1++) {
                if (res[temp][temp1] == 0 || res[temp1][temp1] == 0) {
                    continue;
                } else {
                    zeroCounter = 0;
                    coeficient = res[temp][temp1] / res[temp1][temp1];
                }
                for (temp2 = 0; temp2 < res.length; temp2++) {
                    res[temp][temp2] = res[temp][temp2]
                            - res[temp1][temp2] * coeficient;
                    
                    if (res[temp][temp2] == 0) {
                        zeroCounter++;
                    }
                }
                if (temp < res.length - 1 && zeroCounter > temp) {
                    swap(res[temp], res[temp + 1]);
                    sign *= -1;
                    temp--;
                }
            }
        }

        for (temp = 0; temp < res.length; temp++) {
            result *= res[temp][temp];
        }
        return result * sign;
    }
   
    //Cuadro transpuesta
    private static void frameTransposing(double[][] matrix) {
        if (manipulatedMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
            return;
        }

        double[][] transMatrix = new double[matrix[0].length][matrix.length];

        transMatrix = Transpose(matrix);

        ShowMatrix(transMatrix, "Matriz transpuesta");
    }

    //Obtener transpuesta
    private static double[][] Transpose(double[][] matrix) {
        double[][] transportMatrix = new double[matrix[0].length][matrix.length];
        int temp1, temp; //termprature variable

        for (temp = 0; temp < matrix[0].length; temp++) {
            for (temp1 = 0; temp1 < matrix.length; temp1++) {
                transportMatrix[temp][temp1]
                        = matrix[temp1][temp];
            }
        }
        return transportMatrix;
    }

    
    private static double[][] getMinor(int i, int j) {

        double[][] results = new double[row - 1][col - 1];
        int row_count = 0, col_count = 0;
        int temp, temp1;

        for (temp = 0; temp < row; temp++) {
            for (temp1 = 0; temp1 < col; temp1++) {
                if (temp != i && temp1 != j) {
                    results[row_count][col_count] = manipulatedMatrix[temp][temp1];
                    col_count++;
                }
            }
            col_count = 0;
            if (i != temp) {
                row_count++;
            }
        }

        return results;
    }

    //Obtener la inversa de una matriz
    private static void inverse() {
        if (manipulatedMatrix.length < 1) {
            JOptionPane.showMessageDialog(null, "No has creado la matriz");
            return;
        } else if (col != row) {
            JOptionPane.showMessageDialog(null, "La matriz debe ser cuadrada");
            return;
        } else if (Math.round(getDeterminant(manipulatedMatrix)) == 0) {
            JOptionPane.showMessageDialog(null, "la matriz "
                    + "no tiene inversa\n\n"
                    + "Ya que el determinante es nulo");
            return;
        }

        double[][] inverseMatrix = new double[row][col];
        double[][] minor = new double[row - 1][col - 1];
        double[][] cofactor = new double[row][col];
        double delta; 
        int temp, temp1;

        for (temp = 0; temp < row; temp++) {
            for (temp1 = 0; temp1 < col; temp1++) {
                minor = getMinor(temp, temp1);
                double minorValue = getDeterminant(minor);
                cofactor[temp][temp1] = Math.pow(-1.0, temp + temp1) * getDeterminant(minor);
            }
        }
        cofactor = Transpose(cofactor);
        delta = getDeterminant(manipulatedMatrix);        

        for (temp = 0; temp < row; temp++) {
            for (temp1 = 0; temp1 < col; temp1++) {
                inverseMatrix[temp][temp1] = cofactor[temp][temp1] / delta;
            }
        }

        ShowMatrix(inverseMatrix, "Matriz inversa");

    }

    private static boolean isInt(String str) {
        int temp;
        if (str.length() == '0') {
            return false;
        }

        for (temp = 0; temp < str.length(); temp++) {
            if (str.charAt(temp) != '+' && str.charAt(temp) != '-'
                    && !Character.isDigit(str.charAt(temp))) {
                return false;
            }
        }
        return true;
    }
    
    private static boolean isDouble(String str) {
        int temp;
        if (str.length() == '0') {
            return false;
        }

        for (temp = 0; temp < str.length(); temp++) {
            if (str.charAt(temp) != '+' && str.charAt(temp) != '-'
                    && str.charAt(temp) != '.'
                    && !Character.isDigit(str.charAt(temp))) {
                return false;
            }
        }
        return true;
    }
    
    //Crear matriz
    private static void NewMatrix() {
        getDimension();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeterminant;
    private javax.swing.JButton btnDivideByScalar;
    private javax.swing.JButton btnInverse;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnMultiply;
    private javax.swing.JButton btnMultiplyByScalar;
    private javax.swing.JButton btnNewMatrix;
    private javax.swing.JButton btnShowMatrix;
    private javax.swing.JButton btnSubstract;
    private javax.swing.JButton btnTranspose;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

}